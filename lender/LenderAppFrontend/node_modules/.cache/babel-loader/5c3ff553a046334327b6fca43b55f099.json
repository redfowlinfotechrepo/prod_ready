{"ast":null,"code":"var _jsxFileName = \"/app/lender/client/LenderAppFrontend/src/Components/SalesExeTableComponent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport axios from \"axios\";\nconst columns = [{\n  id: \"slno\",\n  label: \"Slno.\",\n  minWidth: 100,\n  align: \"center\"\n}, {\n  id: \"name\",\n  label: \"Name\",\n  minWidth: 100,\n  align: \"center\"\n}, {\n  id: \"amountFloated\",\n  label: \"Amount Floated\",\n  minWidth: 100,\n  align: \"center\"\n}];\nexport default function SalesExeTableComponent() {\n  const [fetchedRows, setFetchedRows] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  const alternateRowColor = index => {\n    return index % 2 === 0 ? \"#f2f2f2\" : \"#dddddd\"; // Grayish and blackish colors\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(\"/api/v1/employee/getAllEmployees?Role=SalesExec\");\n        if (response.status === 200) {\n          const {\n            employees,\n            count\n          } = response.data; // Destructure employees and count from response.data\n          setFetchedRows(employees); // Set the employees array into the fetchedRows state\n          console.log(employees); // Log the employees array\n        } else {\n          throw new Error(\"Failed to fetch data\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error.message);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/React.createElement(Paper, {\n    sx: {\n      width: \"100%\",\n      overflow: \"hidden\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    sx: {\n      maxHeight: 440\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    style: {\n      backgroundColor: \"black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, columns.map(column => /*#__PURE__*/React.createElement(TableCell, {\n    key: column.id,\n    align: column.align,\n    style: {\n      background: \"black\",\n      minWidth: column.minWidth,\n      color: \"white\" // Text color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, column.label)))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, fetchedRows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => /*#__PURE__*/React.createElement(TableRow, {\n    hover: true,\n    role: \"checkbox\",\n    tabIndex: -1,\n    key: row.id // Use a unique identifier for the key\n    ,\n    style: {\n      backgroundColor: alternateRowColor(index)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, columns.map(column => /*#__PURE__*/React.createElement(TableCell, {\n    key: column.id,\n    align: column.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }, column.id === \"slno\" ? /*#__PURE__*/React.createElement(React.Fragment, null, index + 1) : column.id === \"name\" ? /*#__PURE__*/React.createElement(React.Fragment, null, row.Name) : column.id === \"amountFloated\" ? /*#__PURE__*/React.createElement(React.Fragment, null, row.AmountLended !== null ? row.AmountLended : 0) // Show 0 if AmountLended is null\n  : /*#__PURE__*/React.createElement(React.Fragment, null, column.format && typeof row[column.id] === \"number\" ? column.format(row[column.id]) : row[column.id])))))))), /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [5, 10, 15],\n    component: \"div\",\n    count: fetchedRows.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onPageChange: handleChangePage,\n    onRowsPerPageChange: handleChangeRowsPerPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"names":["React","useEffect","useState","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","Button","Box","axios","columns","id","label","minWidth","align","SalesExeTableComponent","fetchedRows","setFetchedRows","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","alternateRowColor","index","fetchData","response","get","status","employees","count","data","console","log","Error","error","message","createElement","sx","width","overflow","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","maxHeight","stickyHeader","style","backgroundColor","map","column","key","background","color","slice","row","hover","role","tabIndex","Fragment","Name","AmountLended","format","rowsPerPageOptions","component","length","onPageChange","onRowsPerPageChange"],"sources":["/app/lender/client/LenderAppFrontend/src/Components/SalesExeTableComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport axios from \"axios\";\n\nconst columns = [\n  { id: \"slno\", label: \"Slno.\", minWidth: 100, align: \"center\" },\n  { id: \"name\", label: \"Name\", minWidth: 100, align: \"center\" },\n  {\n    id: \"amountFloated\",\n    label: \"Amount Floated\",\n    minWidth: 100,\n    align: \"center\",\n  },\n];\n\nexport default function SalesExeTableComponent() {\n  const [fetchedRows, setFetchedRows] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const alternateRowColor = (index) => {\n    return index % 2 === 0 ? \"#f2f2f2\" : \"#dddddd\"; // Grayish and blackish colors\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(\n          \"/api/v1/employee/getAllEmployees?Role=SalesExec\"\n        );\n        if (response.status === 200) {\n          const { employees, count } = response.data; // Destructure employees and count from response.data\n          setFetchedRows(employees); // Set the employees array into the fetchedRows state\n          console.log(employees); // Log the employees array\n        } else {\n          throw new Error(\"Failed to fetch data\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error.message);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\n      <TableContainer sx={{ maxHeight: 440 }}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow style={{ backgroundColor: \"black\" }}>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{\n                    background: \"black\",\n                    minWidth: column.minWidth,\n                    color: \"white\", // Text color\n                  }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {fetchedRows\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row, index) => (\n                <TableRow\n                  hover\n                  role=\"checkbox\"\n                  tabIndex={-1}\n                  key={row.id} // Use a unique identifier for the key\n                  style={{ backgroundColor: alternateRowColor(index) }}\n                >\n                  {columns.map((column) => (\n                    <TableCell key={column.id} align={column.align}>\n                      {column.id === \"slno\" ? (\n                        <>{index + 1}</>\n                      ) : column.id === \"name\" ? (\n                        <>{row.Name}</>\n                      ) : column.id === \"amountFloated\" ? (\n                        <>{row.AmountLended !== null ? row.AmountLended : 0}</> // Show 0 if AmountLended is null\n                      ) : (\n                        <>\n                          {column.format && typeof row[column.id] === \"number\"\n                            ? column.format(row[column.id])\n                            : row[column.id]}\n                        </>\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 15]}\n        component=\"div\"\n        count={fetchedRows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}