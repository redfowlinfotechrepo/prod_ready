{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"slots\", \"slotProps\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"paddingAngle\", \"id\", \"highlightScope\", \"highlighted\", \"faded\", \"data\", \"onClick\", \"skipAnimation\"],\n  _excluded2 = [\"startAngle\", \"endAngle\", \"paddingAngle\", \"innerRadius\", \"arcLabelRadius\", \"outerRadius\", \"cornerRadius\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTransition } from '@react-spring/web';\nimport { PieArc } from './PieArc';\nimport { defaultTransitionConfig } from './dataTransform/transition';\nimport { useTransformData } from './dataTransform/useTransformData';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction PieArcPlot(props) {\n  var _slots$pieArc;\n  const {\n      slots,\n      slotProps,\n      innerRadius = 0,\n      outerRadius,\n      cornerRadius = 0,\n      paddingAngle = 0,\n      id,\n      highlightScope,\n      highlighted,\n      faded = {\n        additionalRadius: -5\n      },\n      data,\n      onClick,\n      skipAnimation\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const transformedData = useTransformData({\n    innerRadius,\n    outerRadius,\n    cornerRadius,\n    paddingAngle,\n    id,\n    highlightScope,\n    highlighted,\n    faded,\n    data\n  });\n  const transition = useTransition(transformedData, _extends({}, defaultTransitionConfig, {\n    immediate: skipAnimation\n  }));\n  if (data.length === 0) {\n    return null;\n  }\n  const Arc = (_slots$pieArc = slots == null ? void 0 : slots.pieArc) != null ? _slots$pieArc : PieArc;\n  return /*#__PURE__*/_jsx(\"g\", _extends({}, other, {\n    children: transition((_ref, item, _, index) => {\n      let {\n          startAngle,\n          endAngle,\n          paddingAngle: pA,\n          innerRadius: iR,\n          outerRadius: oR,\n          cornerRadius: cR\n        } = _ref,\n        style = _objectWithoutPropertiesLoose(_ref, _excluded2);\n      return /*#__PURE__*/_jsx(Arc, _extends({\n        startAngle: startAngle,\n        endAngle: endAngle,\n        paddingAngle: pA,\n        innerRadius: iR,\n        outerRadius: oR,\n        cornerRadius: cR,\n        style: style,\n        id: id,\n        color: item.color,\n        dataIndex: index,\n        highlightScope: highlightScope,\n        isFaded: item.isFaded,\n        isHighlighted: item.isHighlighted,\n        onClick: onClick && (event => {\n          onClick(event, {\n            type: 'pie',\n            seriesId: id,\n            dataIndex: index\n          }, item);\n        })\n      }, slotProps == null ? void 0 : slotProps.pieArc));\n    })\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? PieArcPlot.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The radius between circle center and the arc label in px.\n   * @default (innerRadius - outerRadius) / 2\n   */\n  arcLabelRadius: PropTypes.number,\n  /**\n   * The radius applied to arc corners (similar to border radius).\n   * @default 0\n   */\n  cornerRadius: PropTypes.number,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    color: PropTypes.string.isRequired,\n    endAngle: PropTypes.number.isRequired,\n    formattedValue: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    index: PropTypes.number.isRequired,\n    label: PropTypes.string,\n    padAngle: PropTypes.number.isRequired,\n    startAngle: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired\n  })).isRequired,\n  /**\n   * Override the arc attibutes when it is faded.\n   * @default { additionalRadius: -5 }\n   */\n  faded: PropTypes.shape({\n    additionalRadius: PropTypes.number,\n    arcLabelRadius: PropTypes.number,\n    color: PropTypes.string,\n    cornerRadius: PropTypes.number,\n    innerRadius: PropTypes.number,\n    outerRadius: PropTypes.number,\n    paddingAngle: PropTypes.number\n  }),\n  /**\n   * Override the arc attibutes when it is highlighted.\n   */\n  highlighted: PropTypes.shape({\n    additionalRadius: PropTypes.number,\n    arcLabelRadius: PropTypes.number,\n    color: PropTypes.string,\n    cornerRadius: PropTypes.number,\n    innerRadius: PropTypes.number,\n    outerRadius: PropTypes.number,\n    paddingAngle: PropTypes.number\n  }),\n  highlightScope: PropTypes.shape({\n    faded: PropTypes.oneOf(['global', 'none', 'series']),\n    highlighted: PropTypes.oneOf(['item', 'none', 'series'])\n  }),\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  /**\n   * The radius between circle center and the begining of the arc.\n   * @default 0\n   */\n  innerRadius: PropTypes.number,\n  /**\n   * Callback fired when a pie item is clicked.\n   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.\n   * @param {PieItemIdentifier} pieItemIdentifier The pie item identifier.\n   * @param {DefaultizedPieValueType} item The pie item.\n   */\n  onClick: PropTypes.func,\n  /**\n   * The radius between circle center and the end of the arc.\n   */\n  outerRadius: PropTypes.number.isRequired,\n  /**\n   * The padding angle (deg) between two arcs.\n   * @default 0\n   */\n  paddingAngle: PropTypes.number,\n  /**\n   * If `true`, animations are skiped.\n   * @default false\n   */\n  skipAnimation: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object\n} : void 0;\nexport { PieArcPlot };","map":null,"metadata":{},"sourceType":"module"}