{"ast":null,"code":"var _jsxFileName = \"/app/lender/client/LenderAppFrontend/src/Pages/AddSalesExecutivePage.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport AdminNavbar from \"../Components/AdminNavbar\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Radio from \"@mui/material/Radio\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport PersonOutlineIcon from \"@mui/icons-material/PersonOutline\";\nimport Button from \"@mui/material/Button\";\nimport { IconButton } from \"@mui/material\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nconst AddSalesExecutivePage = () => {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [selectedRowSalesExec, setSelectedRowSalesExec] = useState(null);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedRowClient, setSelectedRowClient] = useState(null);\n  const [selectedRowData, setSelectedRowData] = useState(null);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [fetchedRows, setFetchedRows] = useState([]);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n  const [snackbarSeverity, setSnackbarSeverity] = useState(\"success\");\n  const [clientRows, setClientRows] = useState([]);\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n  const [newUserData, setNewUserData] = useState({\n    name: \"\",\n    email: \"\",\n    phoneNumber: \"\",\n    address: \"\"\n  });\n  const [clientPage, setClientPage] = useState(0);\n  const [clientRowsPerPage, setClientRowsPerPage] = useState(5);\n  const handleChangeClientPage = (event, newPage) => {\n    setClientPage(newPage);\n  };\n  const handleChangeClientRowsPerPage = event => {\n    setClientRowsPerPage(+event.target.value);\n    setClientPage(0);\n  };\n  const handleAddUser = () => {\n    setOpenDialog(true);\n  };\n  const handleSaveUser = () => {\n    // Handle saving new user data here\n    console.log(\"New User Data:\", newUserData);\n    setOpenDialog(false);\n    // Reset input fields after saving if needed\n    setNewUserData({\n      name: \"\",\n      email: \"\",\n      phoneNumber: \"\",\n      address: \"\"\n    });\n  };\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  const handleEdit = () => {\n    setIsEditMode(true);\n  };\n\n  //saving sales exec\n  const handleSave = async () => {\n    setIsEditMode(false);\n\n    // Create the payload with the updated data from input fields\n    const payload = {\n      name: selectedRowData.Name,\n      email: selectedRowData.EmailAddr,\n      phoneNumber: selectedRowData.Phone,\n      address: selectedRowData.Address\n    };\n    try {\n      // Assuming you have the ID of the employee\n      const employeeId = selectedRowData.id; // Replace this with the actual ID\n\n      // Send a PATCH request to update the employee by ID\n      const response = await axios.patch(`/api/v1/employee/updateEmployeeById/${employeeId}`, payload);\n      if (response.status === 200) {\n        setSnackbarSeverity(\"success\");\n        setSnackbarMessage(\"Employee updated successfully\");\n        setSnackbarOpen(true);\n        fetchSalesExec();\n        // Handle success, reset fields or perform any additional actions\n      } else {\n        setSnackbarSeverity(\"error\");\n        setSnackbarMessage(\"Failed to update employee\");\n        setSnackbarOpen(true);\n        // Handle failure scenario\n      }\n    } catch (error) {\n      setSnackbarSeverity(\"error\");\n      setSnackbarMessage(\"Error updating employee\");\n      setSnackbarOpen(true);\n      console.error(\"Error updating employee:\", error.message);\n      // Handle error scenario\n    }\n  };\n\n  // Replace with your data or initialize as needed\n  const SalesExecColumns = [{\n    id: \"slno\",\n    label: \"Slno.\",\n    minWidth: 100\n  }, {\n    id: \"name\",\n    label: \"Name\",\n    minWidth: 170\n  }, {\n    id: \"phoneNumber\",\n    label: \"Phone Number\",\n    minWidth: 170\n  }, {\n    id: \"amountFloated\",\n    label: \"Amount\",\n    minWidth: 170,\n    align: \"center\"\n  }];\n  const clientColumns = [{\n    id: \"slno\",\n    label: \"Slno.\",\n    minWidth: 100,\n    align: \"center\"\n  }, {\n    id: \"name\",\n    label: \"Name\",\n    minWidth: 150,\n    align: \"center\"\n  }, {\n    id: \"phoneNumber\",\n    label: \"Phone Number\",\n    minWidth: 150,\n    align: \"center\"\n  }, {\n    id: \"dateOfLoan\",\n    label: \"Date of Loan\",\n    minWidth: 150,\n    align: \"center\"\n  }, {\n    id: \"amount\",\n    label: \"Amount\",\n    minWidth: 150,\n    align: \"center\"\n  }];\n  const alternateRowColor = index => {\n    return index % 2 === 0 ? \"#f2f2f2\" : \"#dddddd\"; // Grayish and blackish colors\n  };\n  const handleRowSelectSalesExec = (event, row) => {\n    setSelectedRowSalesExec(row.Name);\n    setSelectedEmployee(row.id);\n    setSelectedRowData(row);\n    fetchClients(row.id); // Pass the selected sales exec ID to fetchClients\n  };\n  const handleRowSelectClient = (event, row) => {\n    setSelectedRowClient(row.phoneNumber);\n    console.log(\"Selected Client Row:\", row);\n  };\n  const fetchSalesExec = async () => {\n    try {\n      const response = await axios.get(\"/api/v1/employee/getAllEmployees?Role=SalesExec\");\n      if (response.status === 200) {\n        const {\n          employees\n        } = response.data;\n        setFetchedRows(employees);\n        console.log(employees);\n      } else {\n        throw new Error(\"Failed to fetch data\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error.message);\n    }\n  };\n  const fetchClients = async salesExecID => {\n    try {\n      const response = await axios.get(`/api/v1/client/getAllClientPersonalDetails?salesExecID=${salesExecID}`);\n      if (response.status === 200) {\n        const {\n          clients\n        } = response.data;\n        setClientRows(clients); // Update the clientRows state with the fetched data\n        console.log(\"clients:\", clients);\n      } else {\n        throw new Error(\"Failed to fetch data\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error.message);\n    }\n  };\n  useEffect(() => {\n    fetchSalesExec();\n  }, []);\n  useEffect(() => {\n    if (selectedEmployee) {\n      fetchClients(selectedEmployee);\n    }\n  }, [selectedEmployee]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AdminNavbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      marginTop: \"63px\",\n      backgroundColor: \"white\",\n      width: \"100%\",\n      minHeight: \"20px\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }, \"Sales Excecutives \"))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"SalesExecDetails\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      backgroundColor: \"white\",\n      width: \"100%\",\n      height: \"600px\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"stretch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      height: \"100%\",\n      backgroundColor: \"#A4BE7B\",\n      width: \"100%\",\n      display: \"flex-col\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      padding: \"20px\",\n      borderRadius: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    sx: {\n      width: \"100%\",\n      overflow: \"hidden\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    sx: {\n      maxHeight: 440\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    style: {\n      backgroundColor: \"black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    style: {\n      background: \"black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 29\n    }\n  }), SalesExecColumns.map(column => /*#__PURE__*/React.createElement(TableCell, {\n    key: column.id,\n    align: column.align,\n    style: {\n      background: \"black\",\n      minWidth: column.minWidth,\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 31\n    }\n  }, column.label)))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 25\n    }\n  }, fetchedRows.map((row, index) => /*#__PURE__*/React.createElement(TableRow, {\n    hover: true,\n    role: \"checkbox\",\n    tabIndex: -1,\n    key: row.id // Use a unique identifier for the key, assuming row.id exists\n    ,\n    style: {\n      backgroundColor: alternateRowColor(index)\n    }\n    // Handle selection for Sales Executives table\n    ,\n    onClick: event => handleRowSelectSalesExec(event, row),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 31\n    }\n  }, /*#__PURE__*/React.createElement(Radio, {\n    value: row.Phone // Use a unique identifier for the value\n    ,\n    checked: selectedRowSalesExec === row.Name // Compare with the same field used for selection\n    ,\n    onChange: event => handleRowSelectSalesExec(event, row),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 31\n    }\n  }, index + 1), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 31\n    }\n  }, row.Name), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 31\n    }\n  }, row.Phone), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 31\n    }\n  }, row.AmountLended || 0)))))), /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [5, 10, 15],\n    component: \"div\",\n    count: fetchedRows.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onPageChange: handleChangePage,\n    onRowsPerPageChange: handleChangeRowsPerPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      marginTop: \"20px\",\n      textAlign: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\"\n    // color=\"primary\"\n    ,\n    onClick: handleAddUser,\n    sx: {\n      backgroundColor: \"#285430\",\n      \"&:hover\": {\n        backgroundColor: \"#224B0C\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 21\n    }\n  }, \"Add user\")))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      height: \"100%\",\n      backgroundColor: \"#5F8D4E\",\n      width: \"100%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      padding: \"20px\",\n      borderRadius: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      height: \"100%\",\n      backgroundColor: \"white\",\n      width: \"100%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      padding: \"20px\",\n      borderRadius: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sx: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    alt: \"User Logo\",\n    src: \"/path_to_your_user_logo.jpg\",\n    sx: {\n      width: 100,\n      height: 100\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 27\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Name\",\n    value: selectedRowData ? selectedRowData.Name : \"\",\n    disabled: !isEditMode // Enable/disable based on isEditMode\n    ,\n    onChange: e => setSelectedRowData({\n      ...selectedRowData,\n      Name: e.target.value // Update 'Name' field in the state\n    }),\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 27\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Email\",\n    value: selectedRowData ? selectedRowData.EmailAddr : \"\",\n    disabled: !isEditMode // Enable/disable based on isEditMode\n    ,\n    onChange: e => setSelectedRowData({\n      ...selectedRowData,\n      EmailAddr: e.target.value // Update 'EmailAddr' field in the state\n    }),\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 27\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Phone Number\",\n    value: selectedRowData ? selectedRowData.Phone : \"\",\n    disabled: !isEditMode // Enable/disable based on isEditMode\n    ,\n    onChange: e => setSelectedRowData({\n      ...selectedRowData,\n      Phone: e.target.value // Update 'Phone' field in the state\n    }),\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 27\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Address\",\n    value: selectedRowData ? selectedRowData.Address : \"\",\n    disabled: !isEditMode // Enable/disable based on isEditMode\n    ,\n    onChange: e => setSelectedRowData({\n      ...selectedRowData,\n      Address: e.target.value // Update 'Address' field in the state\n    }),\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 27\n    }\n  }))))), /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      marginTop: \"20px\",\n      textAlign: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 19\n    }\n  }, isEditMode ?\n  /*#__PURE__*/\n  // Conditionally render Save/Edit button based on edit mode\n  React.createElement(Button, {\n    variant: \"contained\"\n    // color=\"primary\"\n    ,\n    sx: {\n      backgroundColor: \"#285430\",\n      \"&:hover\": {\n        backgroundColor: \"#224B0C\"\n      }\n    },\n    onClick: handleSave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 23\n    }\n  }, \"Save\") : /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleEdit,\n    sx: {\n      backgroundColor: \"#285430\",\n      \"&:hover\": {\n        backgroundColor: \"#224B0C\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 23\n    }\n  }, \"Edit\", /*#__PURE__*/React.createElement(EditIcon, {\n    fontSize: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 25\n    }\n  }))))))))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"ClientDetails\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      backgroundColor: \"white\",\n      width: \"100%\",\n      height: \"680px\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"stretch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      height: \"100%\",\n      backgroundColor: \"#5F8D4E\",\n      width: \"100%\",\n      display: \"flex-col\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      padding: \"20px\",\n      borderRadius: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      width: \"100%\",\n      minHeight: \"20px\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 21\n    }\n  }, \"Customer Details \")), /*#__PURE__*/React.createElement(Paper, {\n    sx: {\n      width: \"100%\",\n      overflow: \"hidden\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    sx: {\n      maxHeight: 440\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    style: {\n      backgroundColor: \"black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    style: {\n      background: \"black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 29\n    }\n  }), clientColumns.map(column => /*#__PURE__*/React.createElement(TableCell, {\n    key: column.id,\n    align: column.align,\n    style: {\n      background: \"black\",\n      minWidth: column.minWidth,\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 31\n    }\n  }, column.label)))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 25\n    }\n  }, clientRows.slice(clientPage * clientRowsPerPage, clientPage * clientRowsPerPage + clientRowsPerPage).map((row, index) => /*#__PURE__*/React.createElement(TableRow, {\n    hover: true,\n    role: \"checkbox\",\n    tabIndex: -1,\n    key: row.CutomerID // Assuming CutomerID is a unique identifier\n    ,\n    style: {\n      backgroundColor: index % 2 === 0 ? \"#f2f2f2\" : \"#dddddd\"\n    }\n    // Handle selection for Client Details table\n    ,\n    onClick: event => handleRowSelectClient(event, row),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 31\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Radio, {\n    value: row.CutomerID // Use a unique identifier for the value\n    ,\n    checked: selectedRowClient === row.CutomerID,\n    onChange: event => handleRowSelectClient(event, row),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 35\n    }\n  })), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 33\n    }\n  }, index + 1), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 33\n    }\n  }, row.CustomerName), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 33\n    }\n  }, row.MobileNo1), clientColumns.map(column => /*#__PURE__*/React.createElement(TableCell, {\n    key: column.id,\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 35\n    }\n  }, row[column.id]))))))), /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [5, 10, 15],\n    component: \"div\",\n    count: clientRows.length,\n    rowsPerPage: clientRowsPerPage,\n    page: clientPage,\n    onPageChange: handleChangeClientPage,\n    onRowsPerPageChange: handleChangeClientRowsPerPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 21\n    }\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      height: \"600px\",\n      backgroundColor: \"#A4BE7B\",\n      width: \"100%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      padding: \"20px\",\n      borderRadius: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      height: \"100%\",\n      backgroundColor: \"white\",\n      width: \"100%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      padding: \"20px\",\n      borderRadius: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 19\n    }\n  }))))))), /*#__PURE__*/React.createElement(Dialog, {\n    open: openDialog,\n    onClose: () => setOpenDialog(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 9\n    }\n  }, \"Add User\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogContentText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 11\n    }\n  }, \"Please enter user details:\"), /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"16px\",\n      minWidth: \"lg\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Name\",\n    value: newUserData.name,\n    onChange: e => setNewUserData({\n      ...newUserData,\n      name: e.target.value\n    }),\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Email\",\n    value: newUserData.email,\n    onChange: e => setNewUserData({\n      ...newUserData,\n      email: e.target.value\n    }),\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Phone Number\",\n    value: newUserData.phoneNumber,\n    onChange: e => setNewUserData({\n      ...newUserData,\n      phoneNumber: e.target.value\n    }),\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Address\",\n    value: newUserData.address,\n    onChange: e => setNewUserData({\n      ...newUserData,\n      address: e.target.value\n    }),\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setOpenDialog(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 11\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSaveUser\n    // color=\"primary\"\n    ,\n    sx: {\n      backgroundColor: \"#285430\",\n      \"&:hover\": {\n        backgroundColor: \"#224B0C\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 11\n    }\n  }, \"Save\"))));\n};\nexport default AddSalesExecutivePage;","map":{"version":3,"names":["React","useEffect","useState","axios","AdminNavbar","Grid","Box","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","Radio","Avatar","Typography","TextField","PersonOutlineIcon","Button","IconButton","EditIcon","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","AddSalesExecutivePage","page","setPage","rowsPerPage","setRowsPerPage","selectedRowSalesExec","setSelectedRowSalesExec","selectedEmployee","setSelectedEmployee","selectedRowClient","setSelectedRowClient","selectedRowData","setSelectedRowData","isEditMode","setIsEditMode","openDialog","setOpenDialog","fetchedRows","setFetchedRows","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","clientRows","setClientRows","handleSnackbarClose","newUserData","setNewUserData","name","email","phoneNumber","address","clientPage","setClientPage","clientRowsPerPage","setClientRowsPerPage","handleChangeClientPage","event","newPage","handleChangeClientRowsPerPage","target","value","handleAddUser","handleSaveUser","console","log","handleChangePage","handleChangeRowsPerPage","handleEdit","handleSave","payload","Name","EmailAddr","Phone","Address","employeeId","id","response","patch","status","fetchSalesExec","error","message","SalesExecColumns","label","minWidth","align","clientColumns","alternateRowColor","index","handleRowSelectSalesExec","row","fetchClients","handleRowSelectClient","get","employees","data","Error","salesExecID","clients","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","sx","marginTop","backgroundColor","width","minHeight","padding","variant","height","container","spacing","alignItems","item","xs","display","justifyContent","borderRadius","overflow","maxHeight","stickyHeader","style","background","map","column","key","color","hover","role","tabIndex","onClick","checked","onChange","AmountLended","rowsPerPageOptions","component","count","length","onPageChange","onRowsPerPageChange","textAlign","flexDirection","alt","src","disabled","e","fullWidth","fontSize","md","slice","CutomerID","CustomerName","MobileNo1","open","onClose","gap"],"sources":["/app/lender/client/LenderAppFrontend/src/Pages/AddSalesExecutivePage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport AdminNavbar from \"../Components/AdminNavbar\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Radio from \"@mui/material/Radio\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport PersonOutlineIcon from \"@mui/icons-material/PersonOutline\";\nimport Button from \"@mui/material/Button\";\nimport { IconButton } from \"@mui/material\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\n\nconst AddSalesExecutivePage = () => {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [selectedRowSalesExec, setSelectedRowSalesExec] = useState(null);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n\n  const [selectedRowClient, setSelectedRowClient] = useState(null);\n  const [selectedRowData, setSelectedRowData] = useState(null);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [fetchedRows, setFetchedRows] = useState([]);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n  const [snackbarSeverity, setSnackbarSeverity] = useState(\"success\");\n  const [clientRows, setClientRows] = useState([]);\n\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  const [newUserData, setNewUserData] = useState({\n    name: \"\",\n    email: \"\",\n    phoneNumber: \"\",\n    address: \"\",\n  });\n  const [clientPage, setClientPage] = useState(0);\n  const [clientRowsPerPage, setClientRowsPerPage] = useState(5);\n\n  const handleChangeClientPage = (event, newPage) => {\n    setClientPage(newPage);\n  };\n\n  const handleChangeClientRowsPerPage = (event) => {\n    setClientRowsPerPage(+event.target.value);\n    setClientPage(0);\n  };\n\n  const handleAddUser = () => {\n    setOpenDialog(true);\n  };\n\n  const handleSaveUser = () => {\n    // Handle saving new user data here\n    console.log(\"New User Data:\", newUserData);\n    setOpenDialog(false);\n    // Reset input fields after saving if needed\n    setNewUserData({\n      name: \"\",\n      email: \"\",\n      phoneNumber: \"\",\n      address: \"\",\n    });\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const handleEdit = () => {\n    setIsEditMode(true);\n  };\n\n  //saving sales exec\n  const handleSave = async () => {\n    setIsEditMode(false);\n\n    // Create the payload with the updated data from input fields\n    const payload = {\n      name: selectedRowData.Name,\n      email: selectedRowData.EmailAddr,\n      phoneNumber: selectedRowData.Phone,\n      address: selectedRowData.Address,\n    };\n\n    try {\n      // Assuming you have the ID of the employee\n      const employeeId = selectedRowData.id; // Replace this with the actual ID\n\n      // Send a PATCH request to update the employee by ID\n      const response = await axios.patch(\n        `/api/v1/employee/updateEmployeeById/${employeeId}`,\n        payload\n      );\n\n      if (response.status === 200) {\n        setSnackbarSeverity(\"success\");\n        setSnackbarMessage(\"Employee updated successfully\");\n        setSnackbarOpen(true);\n        fetchSalesExec();\n        // Handle success, reset fields or perform any additional actions\n      } else {\n        setSnackbarSeverity(\"error\");\n        setSnackbarMessage(\"Failed to update employee\");\n        setSnackbarOpen(true);\n        // Handle failure scenario\n      }\n    } catch (error) {\n      setSnackbarSeverity(\"error\");\n      setSnackbarMessage(\"Error updating employee\");\n      setSnackbarOpen(true);\n      console.error(\"Error updating employee:\", error.message);\n      // Handle error scenario\n    }\n  };\n\n  // Replace with your data or initialize as needed\n  const SalesExecColumns = [\n    { id: \"slno\", label: \"Slno.\", minWidth: 100 },\n    { id: \"name\", label: \"Name\", minWidth: 170 },\n    { id: \"phoneNumber\", label: \"Phone Number\", minWidth: 170 },\n    { id: \"amountFloated\", label: \"Amount\", minWidth: 170, align: \"center\" },\n  ];\n\n  const clientColumns = [\n    { id: \"slno\", label: \"Slno.\", minWidth: 100, align: \"center\" },\n    { id: \"name\", label: \"Name\", minWidth: 150, align: \"center\" },\n    {\n      id: \"phoneNumber\",\n      label: \"Phone Number\",\n      minWidth: 150,\n      align: \"center\",\n    },\n    { id: \"dateOfLoan\", label: \"Date of Loan\", minWidth: 150, align: \"center\" },\n    { id: \"amount\", label: \"Amount\", minWidth: 150, align: \"center\" },\n  ];\n\n  const alternateRowColor = (index) => {\n    return index % 2 === 0 ? \"#f2f2f2\" : \"#dddddd\"; // Grayish and blackish colors\n  };\n\n  const handleRowSelectSalesExec = (event, row) => {\n    setSelectedRowSalesExec(row.Name);\n    setSelectedEmployee(row.id);\n    setSelectedRowData(row);\n    fetchClients(row.id); // Pass the selected sales exec ID to fetchClients\n  };\n\n  const handleRowSelectClient = (event, row) => {\n    setSelectedRowClient(row.phoneNumber);\n    console.log(\"Selected Client Row:\", row);\n  };\n\n  const fetchSalesExec = async () => {\n    try {\n      const response = await axios.get(\n        \"/api/v1/employee/getAllEmployees?Role=SalesExec\"\n      );\n      if (response.status === 200) {\n        const { employees } = response.data;\n        setFetchedRows(employees);\n        console.log(employees);\n      } else {\n        throw new Error(\"Failed to fetch data\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error.message);\n    }\n  };\n  const fetchClients = async (salesExecID) => {\n    try {\n      const response = await axios.get(\n        `/api/v1/client/getAllClientPersonalDetails?salesExecID=${salesExecID}`\n      );\n      if (response.status === 200) {\n        const { clients } = response.data;\n        setClientRows(clients); // Update the clientRows state with the fetched data\n        console.log(\"clients:\", clients);\n      } else {\n        throw new Error(\"Failed to fetch data\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error.message);\n    }\n  };\n\n  useEffect(() => {\n    fetchSalesExec();\n  }, []);\n\n  useEffect(() => {\n    if (selectedEmployee) {\n      fetchClients(selectedEmployee);\n    }\n  }, [selectedEmployee]);\n\n  return (\n    <>\n      <AdminNavbar />\n      {/* Header Section */}\n      <section className=\"header\">\n        <Box\n          sx={{\n            marginTop: \"63px\",\n            backgroundColor: \"white\",\n            width: \"100%\",\n            minHeight: \"20px\",\n            padding: \"20px\",\n          }}\n        >\n          <Typography variant=\"h5\">Sales Excecutives </Typography>\n        </Box>\n      </section>\n\n      {/* SalesExecDetails */}\n      <section className=\"SalesExecDetails\">\n        <Box>\n          <Box\n            sx={{\n              backgroundColor: \"white\",\n              width: \"100%\",\n              height: \"600px\",\n              padding: \"20px\",\n            }}\n          >\n            <Grid container spacing={2} alignItems=\"stretch\">\n              <Grid item xs={7}>\n                {/* Sales Exec Table */}\n                <Box\n                  sx={{\n                    height: \"100%\",\n                    backgroundColor: \"#A4BE7B\",\n                    width: \"100%\",\n                    display: \"flex-col\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    padding: \"20px\",\n                    borderRadius: \"10px\",\n                  }}\n                >\n                  <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\n                    <TableContainer sx={{ maxHeight: 440 }}>\n                      <Table stickyHeader aria-label=\"sticky table\">\n                        <TableHead>\n                          <TableRow style={{ backgroundColor: \"black\" }}>\n                            <TableCell style={{ background: \"black\" }} />\n                            {SalesExecColumns.map((column) => (\n                              <TableCell\n                                key={column.id}\n                                align={column.align}\n                                style={{\n                                  background: \"black\",\n                                  minWidth: column.minWidth,\n                                  color: \"white\",\n                                }}\n                              >\n                                {column.label}\n                              </TableCell>\n                            ))}\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {fetchedRows.map((row, index) => (\n                            <TableRow\n                              hover\n                              role=\"checkbox\"\n                              tabIndex={-1}\n                              key={row.id} // Use a unique identifier for the key, assuming row.id exists\n                              style={{\n                                backgroundColor: alternateRowColor(index),\n                              }}\n                              // Handle selection for Sales Executives table\n                              onClick={(event) =>\n                                handleRowSelectSalesExec(event, row)\n                              }\n                            >\n                              <TableCell>\n                                <Radio\n                                  value={row.Phone} // Use a unique identifier for the value\n                                  checked={selectedRowSalesExec === row.Name} // Compare with the same field used for selection\n                                  onChange={(event) =>\n                                    handleRowSelectSalesExec(event, row)\n                                  }\n                                />\n                              </TableCell>\n                              <TableCell align=\"center\">{index + 1}</TableCell>\n                              <TableCell align=\"center\">{row.Name}</TableCell>\n                              <TableCell align=\"center\">{row.Phone}</TableCell>\n                              <TableCell align=\"center\">\n                                {row.AmountLended || 0}\n                              </TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                    <TablePagination\n                      rowsPerPageOptions={[5, 10, 15]}\n                      component=\"div\"\n                      count={fetchedRows.length}\n                      rowsPerPage={rowsPerPage}\n                      page={page}\n                      onPageChange={handleChangePage}\n                      onRowsPerPageChange={handleChangeRowsPerPage}\n                    />\n                  </Paper>\n                  <Box sx={{ marginTop: \"20px\", textAlign: \"right\" }}>\n                    <Button\n                      variant=\"contained\"\n                      // color=\"primary\"\n                      onClick={handleAddUser}\n                      sx={{\n                        backgroundColor: \"#285430\",\n                        \"&:hover\": {\n                          backgroundColor: \"#224B0C\",\n                        },\n                      }}\n                    >\n                      Add user\n                    </Button>\n                  </Box>\n                </Box>\n              </Grid>\n              <Grid item xs={5}>\n                {/* Sales Exec Profile  */}\n                <Box\n                  sx={{\n                    height: \"100%\",\n                    backgroundColor: \"#5F8D4E\",\n                    width: \"100%\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    padding: \"20px\",\n                    borderRadius: \"10px\",\n                  }}\n                >\n                  <Box\n                    sx={{\n                      height: \"100%\",\n                      backgroundColor: \"white\",\n                      width: \"100%\",\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      justifyContent: \"center\",\n                      padding: \"20px\",\n                      borderRadius: \"10px\",\n                    }}\n                  >\n                    <Box>\n                      <Grid container spacing={2} alignItems=\"center\">\n                        <Grid\n                          item\n                          xs={12}\n                          sx={{ display: \"flex\", justifyContent: \"center\" }}\n                        >\n                          <Avatar\n                            alt=\"User Logo\"\n                            src=\"/path_to_your_user_logo.jpg\"\n                            sx={{ width: 100, height: 100 }}\n                          />\n                        </Grid>\n                        <Grid item xs={12}>\n                          <TextField\n                            label=\"Name\"\n                            value={selectedRowData ? selectedRowData.Name : \"\"}\n                            disabled={!isEditMode} // Enable/disable based on isEditMode\n                            onChange={(e) =>\n                              setSelectedRowData({\n                                ...selectedRowData,\n                                Name: e.target.value, // Update 'Name' field in the state\n                              })\n                            }\n                            fullWidth\n                          />\n                        </Grid>\n                        <Grid item xs={12}>\n                          <TextField\n                            label=\"Email\"\n                            value={\n                              selectedRowData ? selectedRowData.EmailAddr : \"\"\n                            }\n                            disabled={!isEditMode} // Enable/disable based on isEditMode\n                            onChange={(e) =>\n                              setSelectedRowData({\n                                ...selectedRowData,\n                                EmailAddr: e.target.value, // Update 'EmailAddr' field in the state\n                              })\n                            }\n                            fullWidth\n                          />\n                        </Grid>\n                        <Grid item xs={12}>\n                          <TextField\n                            label=\"Phone Number\"\n                            value={selectedRowData ? selectedRowData.Phone : \"\"}\n                            disabled={!isEditMode} // Enable/disable based on isEditMode\n                            onChange={(e) =>\n                              setSelectedRowData({\n                                ...selectedRowData,\n                                Phone: e.target.value, // Update 'Phone' field in the state\n                              })\n                            }\n                            fullWidth\n                          />\n                        </Grid>\n                        <Grid item xs={12}>\n                          <TextField\n                            label=\"Address\"\n                            value={\n                              selectedRowData ? selectedRowData.Address : \"\"\n                            }\n                            disabled={!isEditMode} // Enable/disable based on isEditMode\n                            onChange={(e) =>\n                              setSelectedRowData({\n                                ...selectedRowData,\n                                Address: e.target.value, // Update 'Address' field in the state\n                              })\n                            }\n                            fullWidth\n                          />\n                        </Grid>\n                      </Grid>\n                    </Box>\n                  </Box>\n                  <Box sx={{ marginTop: \"20px\", textAlign: \"right\" }}>\n                    {isEditMode ? ( // Conditionally render Save/Edit button based on edit mode\n                      <Button\n                        variant=\"contained\"\n                        // color=\"primary\"\n                        sx={{\n                          backgroundColor: \"#285430\",\n                          \"&:hover\": {\n                            backgroundColor: \"#224B0C\",\n                          },\n                        }}\n                        onClick={handleSave}\n                      >\n                        Save\n                      </Button>\n                    ) : (\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={handleEdit}\n                        sx={{\n                          backgroundColor: \"#285430\",\n                          \"&:hover\": {\n                            backgroundColor: \"#224B0C\",\n                          },\n                        }}\n                      >\n                        Edit\n                        <EditIcon fontSize=\"sm\" />\n                      </Button>\n                    )}\n                  </Box>\n                </Box>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </section>\n\n      {/* ClientDetails */}\n      <section className=\"ClientDetails\">\n        <Box>\n          <Box\n            sx={{\n              backgroundColor: \"white\",\n              width: \"100%\",\n              height: \"680px\",\n              padding: \"20px\",\n            }}\n          >\n            <Grid container spacing={2} alignItems=\"stretch\">\n              <Grid item xs={12} md={8}>\n                {/* customer Details Table */}\n                <Box\n                  sx={{\n                    height: \"100%\",\n                    backgroundColor: \"#5F8D4E\",\n                    width: \"100%\",\n                    display: \"flex-col\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    padding: \"20px\",\n                    borderRadius: \"10px\",\n                  }}\n                >\n                  <Box\n                    sx={{\n                      width: \"100%\",\n                      minHeight: \"20px\",\n                      padding: \"20px\",\n                    }}\n                  >\n                    <Typography variant=\"h5\">Customer Details </Typography>\n                  </Box>\n                  <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\n                    <TableContainer sx={{ maxHeight: 440 }}>\n                      <Table stickyHeader aria-label=\"sticky table\">\n                        <TableHead>\n                          <TableRow style={{ backgroundColor: \"black\" }}>\n                            <TableCell style={{ background: \"black\" }} />\n                            {clientColumns.map((column) => (\n                              <TableCell\n                                key={column.id}\n                                align={column.align}\n                                style={{\n                                  background: \"black\",\n                                  minWidth: column.minWidth,\n                                  color: \"white\",\n                                }}\n                              >\n                                {column.label}\n                              </TableCell>\n                            ))}\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {clientRows\n                            .slice(\n                              clientPage * clientRowsPerPage,\n                              clientPage * clientRowsPerPage + clientRowsPerPage\n                            )\n                            .map((row, index) => (\n                              <TableRow\n                                hover\n                                role=\"checkbox\"\n                                tabIndex={-1}\n                                key={row.CutomerID} // Assuming CutomerID is a unique identifier\n                                style={{\n                                  backgroundColor:\n                                    index % 2 === 0 ? \"#f2f2f2\" : \"#dddddd\",\n                                }}\n                                // Handle selection for Client Details table\n                                onClick={(event) =>\n                                  handleRowSelectClient(event, row)\n                                }\n                              >\n                                <TableCell>\n                                  <Radio\n                                    value={row.CutomerID} // Use a unique identifier for the value\n                                    checked={\n                                      selectedRowClient === row.CutomerID\n                                    }\n                                    onChange={(event) =>\n                                      handleRowSelectClient(event, row)\n                                    }\n                                  />\n                                </TableCell>\n                                <TableCell align=\"center\">\n                                  {index + 1}\n                                </TableCell>\n                                <TableCell align=\"center\">\n                                  {row.CustomerName}\n                                </TableCell>\n                                <TableCell align=\"center\">\n                                  {row.MobileNo1}\n                                </TableCell>\n\n                                {clientColumns.map((column) => (\n                                  <TableCell key={column.id} align=\"center\">\n                                    {row[column.id]}\n                                  </TableCell>\n                                ))}\n                              </TableRow>\n                            ))}\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n\n                    <TablePagination\n                      rowsPerPageOptions={[5, 10, 15]}\n                      component=\"div\"\n                      count={clientRows.length}\n                      rowsPerPage={clientRowsPerPage}\n                      page={clientPage}\n                      onPageChange={handleChangeClientPage}\n                      onRowsPerPageChange={handleChangeClientRowsPerPage}\n                    />\n                  </Paper>\n                </Box>\n              </Grid>\n              <Grid item xs={12} md={4}>\n                <Box\n                  sx={{\n                    height: \"600px\",\n                    backgroundColor: \"#A4BE7B\",\n                    width: \"100%\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    padding: \"20px\",\n                    borderRadius: \"10px\",\n                  }}\n                >\n                  <Box\n                    sx={{\n                      height: \"100%\",\n                      backgroundColor: \"white\",\n                      width: \"100%\",\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      justifyContent: \"center\",\n                      padding: \"20px\",\n                      borderRadius: \"10px\",\n                    }}\n                  >\n                    {/* Content for the white box */}\n                  </Box>\n                </Box>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </section>\n\n      {/* Modal to add user */}\n      <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\n        <DialogTitle>Add User</DialogTitle>\n        <DialogContent>\n          <DialogContentText>Please enter user details:</DialogContentText>\n          <Box\n            sx={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              gap: \"16px\",\n              minWidth: \"lg\",\n            }}\n          >\n            <TextField\n              label=\"Name\"\n              value={newUserData.name}\n              onChange={(e) =>\n                setNewUserData({ ...newUserData, name: e.target.value })\n              }\n              fullWidth\n            />\n            <TextField\n              label=\"Email\"\n              value={newUserData.email}\n              onChange={(e) =>\n                setNewUserData({ ...newUserData, email: e.target.value })\n              }\n              fullWidth\n            />\n            <TextField\n              label=\"Phone Number\"\n              value={newUserData.phoneNumber}\n              onChange={(e) =>\n                setNewUserData({ ...newUserData, phoneNumber: e.target.value })\n              }\n              fullWidth\n            />\n            <TextField\n              label=\"Address\"\n              value={newUserData.address}\n              onChange={(e) =>\n                setNewUserData({ ...newUserData, address: e.target.value })\n              }\n              fullWidth\n            />\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenDialog(false)}>Cancel</Button>\n          <Button\n            onClick={handleSaveUser}\n            // color=\"primary\"\n            sx={{\n              backgroundColor: \"#285430\",\n              \"&:hover\": {\n                backgroundColor: \"#224B0C\",\n              },\n            }}\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default AddSalesExecutivePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}