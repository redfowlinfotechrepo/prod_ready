{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport composeClasses from '@mui/utils/composeClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nimport generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport { styled } from '@mui/material/styles';\nimport { InteractionContext } from '../context/InteractionProvider';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { getValueToPositionMapper } from '../hooks/useScale';\nimport { isBandScale } from '../internals/isBandScale';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function getAxisHighlightUtilityClass(slot) {\n  return generateUtilityClass('MuiChartsAxisHighlight', slot);\n}\nexport const chartsAxisHighlightClasses = generateUtilityClasses('MuiChartsAxisHighlight', ['root']);\nconst useUtilityClasses = () => {\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getAxisHighlightUtilityClass);\n};\nexport const ChartsAxisHighlightPath = styled('path', {\n  name: 'MuiChartsAxisHighlight',\n  slot: 'Root',\n  overridesResolver: (_, styles) => styles.root\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  pointerEvents: 'none'\n}, ownerState.axisHighlight === 'band' && {\n  fill: theme.palette.mode === 'light' ? 'gray' : 'white',\n  fillOpacity: 0.1\n}, ownerState.axisHighlight === 'line' && {\n  strokeDasharray: '5 2',\n  stroke: theme.palette.mode === 'light' ? '#000000' : '#ffffff'\n}));\n/**\n * Demos:\n *\n * - [Custom components](https://mui.com/x/react-charts/components/)\n *\n * API:\n *\n * - [ChartsAxisHighlight API](https://mui.com/x/api/charts/charts-axis-highlight/)\n */\nfunction ChartsAxisHighlight(props) {\n  const {\n    x: xAxisHighlight,\n    y: yAxisHighlight\n  } = props;\n  const {\n    xAxisIds,\n    xAxis,\n    yAxisIds,\n    yAxis\n  } = React.useContext(CartesianContext);\n  const classes = useUtilityClasses();\n  const USED_X_AXIS_ID = xAxisIds[0];\n  const USED_Y_AXIS_ID = yAxisIds[0];\n  const xScale = xAxis[USED_X_AXIS_ID].scale;\n  const yScale = yAxis[USED_Y_AXIS_ID].scale;\n  const {\n    axis\n  } = React.useContext(InteractionContext);\n  const getXPosition = getValueToPositionMapper(xScale);\n  const getYPosition = getValueToPositionMapper(yScale);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [xAxisHighlight === 'band' && axis.x !== null && isBandScale(xScale) && /*#__PURE__*/_jsx(ChartsAxisHighlightPath, {\n      d: `M ${xScale(axis.x.value) - (xScale.step() - xScale.bandwidth()) / 2} ${yScale.range()[0]} l ${xScale.step()} 0 l 0 ${yScale.range()[1] - yScale.range()[0]} l ${-xScale.step()} 0 Z`,\n      className: classes.root,\n      ownerState: {\n        axisHighlight: 'band'\n      }\n    }), yAxisHighlight === 'band' && axis.y !== null && isBandScale(yScale) && /*#__PURE__*/_jsx(ChartsAxisHighlightPath, {\n      d: `M ${xScale.range()[0]} ${yScale(axis.y.value) - (yScale.step() - yScale.bandwidth()) / 2} l 0 ${yScale.step()} l ${xScale.range()[1] - xScale.range()[0]} 0 l 0 ${-yScale.step()} Z`,\n      className: classes.root,\n      ownerState: {\n        axisHighlight: 'band'\n      }\n    }), xAxisHighlight === 'line' && axis.x !== null && /*#__PURE__*/_jsx(ChartsAxisHighlightPath, {\n      d: `M ${getXPosition(axis.x.value)} ${yScale.range()[0]} L ${getXPosition(axis.x.value)} ${yScale.range()[1]}`,\n      className: classes.root,\n      ownerState: {\n        axisHighlight: 'line'\n      }\n    }), yAxisHighlight === 'line' && axis.y !== null && /*#__PURE__*/_jsx(ChartsAxisHighlightPath, {\n      d: `M ${xScale.range()[0]} ${getYPosition(axis.y.value)} L ${xScale.range()[1]} ${getYPosition(axis.y.value)}`,\n      className: classes.root,\n      ownerState: {\n        axisHighlight: 'line'\n      }\n    })]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? ChartsAxisHighlight.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  x: PropTypes.oneOf(['band', 'line', 'none']),\n  y: PropTypes.oneOf(['band', 'line', 'none'])\n} : void 0;\nexport { ChartsAxisHighlight };","map":null,"metadata":{},"sourceType":"module"}