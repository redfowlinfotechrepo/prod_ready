{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { SeriesContext } from '../context/SeriesContextProvider';\nimport { DrawingContext } from '../context/DrawingProvider';\nimport { PieArcPlot } from './PieArcPlot';\nimport { PieArcLabelPlot } from './PieArcLabelPlot';\nimport { getPercentageValue } from '../internals/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n/**\n * Demos:\n *\n * - [Pie](https://mui.com/x/react-charts/pie/)\n * - [Pie demonstration](https://mui.com/x/react-charts/pie-demo/)\n *\n * API:\n *\n * - [PiePlot API](https://mui.com/x/api/charts/pie-plot/)\n */\nfunction PiePlot(props) {\n  const {\n    skipAnimation,\n    slots,\n    slotProps,\n    onClick\n  } = props;\n  const seriesData = React.useContext(SeriesContext).pie;\n  const {\n    left,\n    top,\n    width,\n    height\n  } = React.useContext(DrawingContext);\n  if (seriesData === undefined) {\n    return null;\n  }\n  const availableRadius = Math.min(width, height) / 2;\n  const {\n    series,\n    seriesOrder\n  } = seriesData;\n  return /*#__PURE__*/_jsxs(\"g\", {\n    children: [seriesOrder.map(seriesId => {\n      const {\n        innerRadius: innerRadiusParam,\n        outerRadius: outerRadiusParam,\n        cornerRadius,\n        paddingAngle,\n        data,\n        cx: cxParam,\n        cy: cyParam,\n        highlighted,\n        faded,\n        highlightScope\n      } = series[seriesId];\n      const outerRadius = getPercentageValue(outerRadiusParam != null ? outerRadiusParam : availableRadius, availableRadius);\n      const innerRadius = getPercentageValue(innerRadiusParam != null ? innerRadiusParam : 0, availableRadius);\n      const cx = getPercentageValue(cxParam != null ? cxParam : '50%', width);\n      const cy = getPercentageValue(cyParam != null ? cyParam : '50%', height);\n      return /*#__PURE__*/_jsx(\"g\", {\n        transform: `translate(${left + cx}, ${top + cy})`,\n        children: /*#__PURE__*/_jsx(PieArcPlot, {\n          innerRadius: innerRadius,\n          outerRadius: outerRadius,\n          cornerRadius: cornerRadius,\n          paddingAngle: paddingAngle,\n          id: seriesId,\n          data: data,\n          skipAnimation: skipAnimation,\n          highlightScope: highlightScope,\n          highlighted: highlighted,\n          faded: faded,\n          onClick: onClick,\n          slots: slots,\n          slotProps: slotProps\n        })\n      }, seriesId);\n    }), seriesOrder.map(seriesId => {\n      const {\n        innerRadius: innerRadiusParam,\n        outerRadius: outerRadiusParam,\n        arcLabelRadius: arcLabelRadiusParam,\n        cornerRadius,\n        paddingAngle,\n        arcLabel,\n        arcLabelMinAngle,\n        data,\n        cx: cxParam,\n        cy: cyParam,\n        highlightScope\n      } = series[seriesId];\n      const outerRadius = getPercentageValue(outerRadiusParam != null ? outerRadiusParam : availableRadius, availableRadius);\n      const innerRadius = getPercentageValue(innerRadiusParam != null ? innerRadiusParam : 0, availableRadius);\n      const arcLabelRadius = arcLabelRadiusParam === undefined ? (outerRadius + innerRadius) / 2 : getPercentageValue(arcLabelRadiusParam, availableRadius);\n      const cx = getPercentageValue(cxParam != null ? cxParam : '50%', width);\n      const cy = getPercentageValue(cyParam != null ? cyParam : '50%', height);\n      return /*#__PURE__*/_jsx(\"g\", {\n        transform: `translate(${left + cx}, ${top + cy})`,\n        children: /*#__PURE__*/_jsx(PieArcLabelPlot, {\n          innerRadius: innerRadius,\n          outerRadius: outerRadius != null ? outerRadius : availableRadius,\n          arcLabelRadius: arcLabelRadius,\n          cornerRadius: cornerRadius,\n          paddingAngle: paddingAngle,\n          id: seriesId,\n          data: data,\n          skipAnimation: skipAnimation,\n          arcLabel: arcLabel,\n          arcLabelMinAngle: arcLabelMinAngle,\n          highlightScope: highlightScope\n        })\n      }, seriesId);\n    })]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? PiePlot.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * Callback fired when a pie item is clicked.\n   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.\n   * @param {PieItemIdentifier} pieItemIdentifier The pie item identifier.\n   * @param {DefaultizedPieValueType} item The pie item.\n   */\n  onClick: PropTypes.func,\n  /**\n   * If `true`, animations are skiped.\n   * @default false\n   */\n  skipAnimation: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object\n} : void 0;\nexport { PiePlot };","map":null,"metadata":{},"sourceType":"module"}