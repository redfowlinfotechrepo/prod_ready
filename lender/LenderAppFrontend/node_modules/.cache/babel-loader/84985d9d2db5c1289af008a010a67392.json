{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"id\", \"classes\", \"color\", \"startAngle\", \"endAngle\", \"paddingAngle\", \"arcLabelRadius\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"formattedArcLabel\", \"isHighlighted\", \"isFaded\", \"style\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { animated, to } from '@react-spring/web';\nimport { arc as d3Arc } from 'd3-shape';\nimport composeClasses from '@mui/utils/composeClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nimport { styled } from '@mui/material/styles';\nimport generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function getPieArcLabelUtilityClass(slot) {\n  return generateUtilityClass('MuiPieArcLabel', slot);\n}\nexport const pieArcLabelClasses = generateUtilityClasses('MuiPieArcLabel', ['root', 'highlighted', 'faded']);\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    id,\n    isFaded,\n    isHighlighted\n  } = ownerState;\n  const slots = {\n    root: ['root', `series-${id}`, isHighlighted && 'highlighted', isFaded && 'faded']\n  };\n  return composeClasses(slots, getPieArcLabelUtilityClass, classes);\n};\nconst PieArcLabelRoot = styled(animated.text, {\n  name: 'MuiPieArcLabel',\n  slot: 'Root',\n  overridesResolver: (_, styles) => styles.root\n})(({\n  theme\n}) => ({\n  fill: (theme.vars || theme).palette.text.primary,\n  textAnchor: 'middle',\n  dominantBaseline: 'middle'\n}));\n/**\n * Helper to compute label position.\n * It's not an inline function because we need it in inerpolation.\n */\nconst getLabelPosition = (formattedArcLabel, variable) => (startAngle, endAngle, padAngle, arcLabelRadius, cornerRadius) => {\n  if (!formattedArcLabel) {\n    return 0;\n  }\n  const [x, y] = d3Arc().cornerRadius(cornerRadius).centroid({\n    padAngle,\n    startAngle,\n    endAngle,\n    innerRadius: arcLabelRadius,\n    outerRadius: arcLabelRadius\n  });\n  if (variable === 'x') {\n    return x;\n  }\n  return y;\n};\nfunction PieArcLabel(props) {\n  const {\n      id,\n      classes: innerClasses,\n      color,\n      startAngle,\n      endAngle,\n      paddingAngle,\n      arcLabelRadius,\n      cornerRadius,\n      formattedArcLabel,\n      isHighlighted,\n      isFaded,\n      style\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = {\n    id,\n    classes: innerClasses,\n    color,\n    isFaded,\n    isHighlighted\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(PieArcLabelRoot, _extends({\n    className: classes.root\n  }, other, {\n    style: _extends({\n      x: to([startAngle, endAngle, paddingAngle, arcLabelRadius, cornerRadius], getLabelPosition(formattedArcLabel, 'x')),\n      y: to([startAngle, endAngle, paddingAngle, arcLabelRadius, cornerRadius], getLabelPosition(formattedArcLabel, 'y'))\n    }, style),\n    children: formattedArcLabel\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? PieArcLabel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  classes: PropTypes.object,\n  formattedArcLabel: PropTypes.string,\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  isFaded: PropTypes.bool.isRequired,\n  isHighlighted: PropTypes.bool.isRequired\n} : void 0;\nexport { PieArcLabel };","map":null,"metadata":{},"sourceType":"module"}